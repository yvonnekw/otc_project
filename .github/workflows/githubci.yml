name: CI/CD

on:
   pull_request:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    services:
      db:
        image: postgres:16.1
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: otcDb
        ports:
          - 5434:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 3

      rabbitmq:
        image: rabbitmq:latest
        env:
          RABBITMQ_DEFAULT_USER: ${{ secrets.RABBITMQ_USERNAME }}
          RABBITMQ_DEFAULT_PASS: ${{ secrets.RABBITMQ_PASSWORD }}
        ports:
          - 5672:5672
        options: --health-cmd "rabbitmq-diagnostics -q ping"

      elasticsearch:
        image: docker.elastic.co/elasticsearch/elasticsearch:7.17.0
        env:
          ES_JAVA_OPTS: "-Xmx256m -Xms256m"
          discovery.type: single-node
        ports:
          - 9200:9200
          - 9300:9300
        options: --health-cmd "curl -f http://localhost:9200/_cluster/health || exit 1"

    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Setup Java JDK
      - name: Setup Java JDK
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'linux'
          java-package: 'jdk'
          architecture: 'x64'
          check-latest: false
          server-id: 'github'
          server-password: ${{ secrets.GH_TOKEN }}  # GitHub token
          overwrite-settings: true
          job-status: 'success'

      # Build the frontend
      - name: Build frontend
        run: |
          cd frontend
          npm install
          npm run build

      # Build the backend
      - name: Build backend
        run: |
          cd otc-backend
          mvn clean install -DskipTests

      # Log in to Docker Hub (or your Docker registry)
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Build and push Docker images for frontend and backend
      - name: Build and push Docker images
        run: |
          # Build frontend Docker image
          docker build -t your-frontend-image:latest frontend
          docker push your-frontend-image:latest

          # Build backend Docker image
          docker build -t your-backend-image:latest backend
          docker push your-backend-image:latest
