name: CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    services:
      db:
        image: postgres:16.1
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: otcDb
        ports:
          - 5434:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 3

      rabbitmq:
        image: rabbitmq:latest
        env:
          RABBITMQ_DEFAULT_USER: ${{ secrets.RABBITMQ_USERNAME }}
          RABBITMQ_DEFAULT_PASS: ${{ secrets.RABBITMQ_PASSWORD }}
        ports:
          - 5672:5672
        options: --health-cmd "rabbitmq-diagnostics -q ping"

      elasticsearch:
        image: docker.elastic.co/elasticsearch/elasticsearch:7.17.0
        env:
          ES_JAVA_OPTS: "-Xmx256m -Xms256m"
          discovery.type: single-node
        ports:
          - 9200:9200
          - 9300:9300
        options: --health-cmd "curl -f http://localhost:9200/_cluster/health || exit 1"

    steps:
      # Checkout the repository
      #- name: Checkout code
      #  uses: actions/checkout@v3
      - uses: actions/checkout@v3
      - name: Set up JDK 20
        uses: actions/setup-java@v3
        with:
          java-version: '20'
          distribution: 'temurin'
          cache: maven
      - name: Build with Maven
        run: |
          cd otc-backend
          mvn clean install -DskipTests --file pom.xml

      # Build the frontend
      #- name: Build frontend
      - uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: install frontend
        run: |
          cd frontend
          npm install
      - name: Build frontend Package
        env:
          CI: false
        run: |
          cd frontend
          npm run build
          
          #run: |
          #cd frontend
          #npm install
          #npm run build
          
          # Build the backend
          #- name: Build backend
          #run: |
          #cd otc-backend
          # ./mvnw clean install -DskipTests

      - name: Logging to Docker
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker images
        uses: docker/build-push-action@v5
        #run: |
          # Build frontend Docker image
          docker build -t yvonnetest/otc-vite-react-frontend-image:latest frontend
          docker push yvonnetest/otc-vite-react-frontend-image:latest

          # Build backend Docker image
          docker build -t yvonnetest/otc-springboot-backend-image:latest otc-backend
          docker push yvonnetest/otc-springboot-backend-image:latest
          
